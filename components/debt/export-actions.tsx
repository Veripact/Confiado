"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Download, FileText, FileJson } from "lucide-react"
import { format } from "date-fns"

interface ExportActionsProps {
  debt: {
    id: string
    debtorName: string
    creditorName: string
    total: number
    paid: number
    remaining: number
    status: string
    dueDate: string
    currency: string
    description?: string
    createdDate: string
    payments: Array<{
      id: string
      amount: number
      method: string
      date: string
      status: string
      note?: string
    }>
  }
}

export function ExportActions({ debt }: ExportActionsProps) {
  const [exportFormat, setExportFormat] = useState<"json" | "pdf">("pdf")
  const [isExporting, setIsExporting] = useState(false)

  const generateProofData = () => {
    return {
      debtAgreement: {
        id: debt.id,
        creditor: debt.creditorName,
        debtor: debt.debtorName,
        totalAmount: debt.total,
        currency: debt.currency,
        dueDate: debt.dueDate,
        createdDate: debt.createdDate,
        description: debt.description,
        status: debt.status,
      },
      paymentSummary: {
        totalPaid: debt.paid,
        remainingBalance: debt.remaining,
        paymentProgress: ((debt.paid / debt.total) * 100).toFixed(1) + "%",
      },
      paymentHistory: debt.payments.map((payment) => ({
        id: payment.id,
        amount: payment.amount,
        method: payment.method,
        date: payment.date,
        status: payment.status,
        note: payment.note,
      })),
      exportDetails: {
        exportedAt: new Date().toISOString(),
        exportedBy: "Confiado Debt Management System",
        documentType: "Debt Agreement Proof",
      },
    }
  }

  const downloadJSON = (data: any, filename: string) => {
    const jsonString = JSON.stringify(data, null, 2)
    const blob = new Blob([jsonString], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const generatePDFContent = (data: any) => {
    const content = `
DEBT AGREEMENT PROOF
Generated by Confiado Debt Management System
Export Date: ${format(new Date(), "PPP")}

=====================================

AGREEMENT DETAILS
=====================================
Agreement ID: ${data.debtAgreement.id}
Creditor: ${data.debtAgreement.creditor}
Debtor: ${data.debtAgreement.debtor}
Total Amount: ${data.debtAgreement.currency} ${data.debtAgreement.totalAmount.toFixed(2)}
Due Date: ${format(new Date(data.debtAgreement.dueDate), "PPP")}
Created Date: ${format(new Date(data.debtAgreement.createdDate), "PPP")}
Status: ${data.debtAgreement.status.toUpperCase()}
${data.debtAgreement.description ? `Description: ${data.debtAgreement.description}` : ""}

PAYMENT SUMMARY
=====================================
Total Paid: ${data.debtAgreement.currency} ${data.paymentSummary.totalPaid.toFixed(2)}
Remaining Balance: ${data.debtAgreement.currency} ${data.paymentSummary.remainingBalance.toFixed(2)}
Payment Progress: ${data.paymentSummary.paymentProgress}

PAYMENT HISTORY
=====================================
${data.paymentHistory
  .map(
    (payment: any) => `
Payment ID: ${payment.id}
Amount: ${data.debtAgreement.currency} ${payment.amount.toFixed(2)}
Method: ${payment.method}
Date: ${format(new Date(payment.date), "PPP")}
Status: ${payment.status.toUpperCase()}
${payment.note ? `Note: ${payment.note}` : ""}
---
`,
  )
  .join("")}

=====================================
This document serves as proof of the debt agreement and payment history.
Generated automatically by Confiado Debt Management System.
    `.trim()

    return content
  }

  const downloadPDF = (data: any, filename: string) => {
    const content = generatePDFContent(data)
    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = filename.replace(".pdf", ".txt") // For simplicity, we'll download as text
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const handleExport = async () => {
    setIsExporting(true)

    // Simulate processing time
    await new Promise((resolve) => setTimeout(resolve, 1500))

    const proofData = generateProofData()
    const timestamp = format(new Date(), "yyyy-MM-dd_HH-mm-ss")
    const filename = `debt-proof-${debt.id}-${timestamp}`

    if (exportFormat === "json") {
      downloadJSON(proofData, `${filename}.json`)
    } else {
      downloadPDF(proofData, `${filename}.pdf`)
    }

    setIsExporting(false)
  }

  return (
    <section>
      <h2 className="text-xl font-serif font-semibold mb-4">Export Proof</h2>

      <Card className="shadow-sm">
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Download className="w-5 h-5" />
            Download Debt Proof
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-muted-foreground">
            Export a comprehensive proof document containing the debt agreement details, payment summary, and complete
            payment history.
          </p>

          <div className="space-y-3">
            <div className="space-y-2">
              <label className="text-sm font-medium">Export Format</label>
              <Select value={exportFormat} onValueChange={(value: "json" | "pdf") => setExportFormat(value)}>
                <SelectTrigger className="w-full">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pdf">
                    <div className="flex items-center gap-2">
                      <FileText className="w-4 h-4" />
                      <span>PDF Document</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="json">
                    <div className="flex items-center gap-2">
                      <FileJson className="w-4 h-4" />
                      <span>JSON Data</span>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="bg-muted p-4 rounded-lg">
              <h4 className="font-medium mb-2">Document will include:</h4>
              <ul className="text-sm space-y-1 text-muted-foreground">
                <li>• Complete debt agreement details</li>
                <li>• Payment summary and progress</li>
                <li>• Full payment history with dates and methods</li>
                <li>• Export timestamp and verification details</li>
              </ul>
            </div>

            <Button onClick={handleExport} disabled={isExporting} className="w-full">
              <Download className="w-4 h-4 mr-2" />
              {isExporting ? "Generating Export..." : `Export as ${exportFormat.toUpperCase()}`}
            </Button>
          </div>
        </CardContent>
      </Card>
    </section>
  )
}
